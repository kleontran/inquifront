{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useEffect, useState } from \"react\";\nimport { useSelector } from \"react-redux\";\n\nfunction useFetch(url, key) {\n  _s();\n\n  const [data, setData] = useState();\n  const login = useSelector(s => s.login);\n  useEffect(() => {\n    const opts = {};\n\n    if (login) {\n      opts.headers = {\n        'Authorization': login.token\n      };\n    }\n\n    fetch(url, opts).then(res => res.json()).then(data => {\n      setData(data);\n    });\n  }, [url, key, login]);\n  console.log(url);\n  return data;\n}\n\n_s(useFetch, \"+r9++pCzeK6XL1A9f8hQQBgn5b4=\", false, function () {\n  return [useSelector];\n});\n\nexport default useFetch;","map":{"version":3,"sources":["/home/hacker/Desktop/1inqui/Inquilino-Perfecto/inquilino-front/src/useFetch.js"],"names":["useEffect","useState","useSelector","useFetch","url","key","data","setData","login","s","opts","headers","token","fetch","then","res","json","console","log"],"mappings":";;AAAA,SAASA,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AACA,SAASC,WAAT,QAA4B,aAA5B;;AAEA,SAASC,QAAT,CAAkBC,GAAlB,EAAuBC,GAAvB,EAA4B;AAAA;;AACxB,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBN,QAAQ,EAAhC;AAEA,QAAMO,KAAK,GAAGN,WAAW,CAACO,CAAC,IAAIA,CAAC,CAACD,KAAR,CAAzB;AAEAR,EAAAA,SAAS,CAAC,MAAM;AACZ,UAAMU,IAAI,GAAG,EAAb;;AACA,QAAIF,KAAJ,EAAW;AACPE,MAAAA,IAAI,CAACC,OAAL,GAAe;AAAE,yBAAiBH,KAAK,CAACI;AAAzB,OAAf;AACH;;AACDC,IAAAA,KAAK,CAACT,GAAD,EAAMM,IAAN,CAAL,CACKI,IADL,CACUC,GAAG,IAAIA,GAAG,CAACC,IAAJ,EADjB,EAEKF,IAFL,CAEUR,IAAI,IAAI;AACVC,MAAAA,OAAO,CAACD,IAAD,CAAP;AACH,KAJL;AAKH,GAVQ,EAUN,CAACF,GAAD,EAAMC,GAAN,EAAWG,KAAX,CAVM,CAAT;AAYAS,EAAAA,OAAO,CAACC,GAAR,CAAYd,GAAZ;AAEA,SAAOE,IAAP;AACH;;GApBQH,Q;UAGSD,W;;;AAmBlB,eAAeC,QAAf","sourcesContent":["import { useEffect, useState } from \"react\";\nimport { useSelector } from \"react-redux\";\n\nfunction useFetch(url, key) {\n    const [data, setData] = useState()\n\n    const login = useSelector(s => s.login)\n\n    useEffect(() => {\n        const opts = {}\n        if (login) {\n            opts.headers = { 'Authorization': login.token }\n        }\n        fetch(url, opts)\n            .then(res => res.json())\n            .then(data => {\n                setData(data)\n            })\n    }, [url, key, login])\n\n    console.log(url)\n\n    return data\n}\n\nexport default useFetch"]},"metadata":{},"sourceType":"module"}